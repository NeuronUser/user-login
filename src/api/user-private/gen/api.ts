/**
 * User Private API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "http://localhost/api-private/v1/users".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
}

export interface InlineResponseDefault {
    "status"?: string;
    /**
     * Error code
     */
    "code"?: string;
    /**
     * Error message
     */
    "message"?: string;
    /**
     * Errors
     */
    "errors"?: Array<InlineResponseDefaultErrors>;
}

export interface InlineResponseDefaultErrors {
    /**
     * field name
     */
    "field"?: string;
    /**
     * error code
     */
    "code"?: string;
    /**
     * error message
     */
    "message"?: string;
}

export interface OauthJumpResponse {
    "token"?: string;
    "refreshToken"?: string;
}



/**
 * DefaultApi - fetch parameter creator
 */
export const DefaultApiFetchParamCreator = {
    /**
     *
     * @summary
     * @param token
     * @param refreshToken
     */
    logout(params: {  "token": string; "refreshToken": string; }, options?: any): FetchArgs {
        // verify required parameter "token" is set
        if (params["token"] == null) {
            throw new Error("Missing required parameter token when calling logout");
        }
        // verify required parameter "refreshToken" is set
        if (params["refreshToken"] == null) {
            throw new Error("Missing required parameter refreshToken when calling logout");
        }
        const baseUrl = `/token/logout`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "token": params["token"],
            "refreshToken": params["refreshToken"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary
     */
    newOauthState(options?: any): FetchArgs {
        const baseUrl = `/token/oauthState`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary
     * @param authorizationCode
     * @param state
     */
    oauthJump(params: {  "authorizationCode": string; "state": string; }, options?: any): FetchArgs {
        // verify required parameter "authorizationCode" is set
        if (params["authorizationCode"] == null) {
            throw new Error("Missing required parameter authorizationCode when calling oauthJump");
        }
        // verify required parameter "state" is set
        if (params["state"] == null) {
            throw new Error("Missing required parameter state when calling oauthJump");
        }
        const baseUrl = `/token/oauthJump`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "authorizationCode": params["authorizationCode"],
            "state": params["state"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary
     * @param refreshToken
     */
    refreshToken(params: {  "refreshToken": string; }, options?: any): FetchArgs {
        // verify required parameter "refreshToken" is set
        if (params["refreshToken"] == null) {
            throw new Error("Missing required parameter refreshToken when calling refreshToken");
        }
        const baseUrl = `/token/refresh`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "refreshToken": params["refreshToken"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = {
    /**
     *
     * @summary
     * @param token
     * @param refreshToken
     */
    logout(params: { "token": string; "refreshToken": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.logout(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary
     */
    newOauthState(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
        const fetchArgs = DefaultApiFetchParamCreator.newOauthState(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary
     * @param authorizationCode
     * @param state
     */
    oauthJump(params: { "authorizationCode": string; "state": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OauthJumpResponse> {
        const fetchArgs = DefaultApiFetchParamCreator.oauthJump(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary
     * @param refreshToken
     */
    refreshToken(params: { "refreshToken": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
        const fetchArgs = DefaultApiFetchParamCreator.refreshToken(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @summary
     * @param token
     * @param refreshToken
     */
    logout(params: {  "token": string; "refreshToken": string; }, options?: any) {
        return DefaultApiFp.logout(params, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary
     */
    newOauthState(options?: any) {
        return DefaultApiFp.newOauthState(options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary
     * @param authorizationCode
     * @param state
     */
    oauthJump(params: {  "authorizationCode": string; "state": string; }, options?: any) {
        return DefaultApiFp.oauthJump(params, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary
     * @param refreshToken
     */
    refreshToken(params: {  "refreshToken": string; }, options?: any) {
        return DefaultApiFp.refreshToken(params, options)(this.fetch, this.basePath);
    }
}

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary
         * @param token
         * @param refreshToken
         */
        logout(params: {  "token": string; "refreshToken": string; }, options?: any) {
            return DefaultApiFp.logout(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary
         */
        newOauthState(options?: any) {
            return DefaultApiFp.newOauthState(options)(fetch, basePath);
        },
        /**
         *
         * @summary
         * @param authorizationCode
         * @param state
         */
        oauthJump(params: {  "authorizationCode": string; "state": string; }, options?: any) {
            return DefaultApiFp.oauthJump(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary
         * @param refreshToken
         */
        refreshToken(params: {  "refreshToken": string; }, options?: any) {
            return DefaultApiFp.refreshToken(params, options)(fetch, basePath);
        },
    };
};

